name: Generate URS PDF

on:
  push:
    branches:
      - main   # run only when committing to main branch
  workflow_dispatch: # also lets you trigger manually

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout repo
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # 3. Install dependencies
      - name: Install dependencies
        run: |
          pip install openai reportlab

      # 4. Generate URS text using ChatGPT
      - name: Generate URS text
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          python - << 'EOF'
          import openai
          from reportlab.lib.pagesizes import A4
          from reportlab.pdfgen import canvas

          # Connect to OpenAI
          openai.api_key = "${{ secrets.OPENAI_API_KEY }}"

          # Prompt for URS
          prompt = """
          You are an expert Business Analyst. Generate a complete, professional and client-ready User Requirement Specification (URS) document for a Digital Inheritance Management System. 
          The document must include:
          - Cover page with title, version, date, and company logo placeholder
          - Table of contents
          - Introduction, Purpose, Scope, and Definitions
          - Functional & non-functional requirements
          - Assumptions & dependencies
          - Diagrams (described in text since PDF rendering is basic here)
          - Tables for requirements with IDs
          - Version history table
          - References
          """

          response = openai.chat.completions.create(
              model="gpt-4o-mini",
              messages=[{"role": "user", "content": prompt}],
              temperature=0.3
          )

          urs_text = response.choices[0].message.content

          # Save as PDF
          pdf_file = "URS.pdf"
          c = canvas.Canvas(pdf_file, pagesize=A4)
          width, height = A4
          y = height - 50

          for line in urs_text.split("\n"):
              c.drawString(50, y, line[:100])  # trim long lines
              y -= 15
              if y < 50:
                  c.showPage()
                  y = height - 50

          c.save()
          print("PDF generated:", pdf_file)
          EOF

      # 5. Upload the URS PDF as artifact
      - name: Upload URS PDF
        uses: actions/upload-artifact@v3
        with:
          name

